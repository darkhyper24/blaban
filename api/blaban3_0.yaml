openapi: 3.0.0
info:
  title: Blaban Restaurant API
  description: API specification for Blaban Restaurant Microservices
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: API Gateway

paths:
  # Auth Service Endpoints (port 8082)
  /api/auth/tokens:
    post:
      tags: [Authentication]
      summary: Generate authentication tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id: 
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: Tokens generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Unauthorized

  /api/auth/verify:
    get:
      tags: [Authentication]
      summary: Verify authentication token
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Token verification result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerification'

  # User Service Endpoints (port 8081)
  /api/users/signup:
    post:
      tags: [Users]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'

  /api/users/login:
    post:
      tags: [Users]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'

  # Menu Service Endpoints (port 8083)
  /api/categories:
    get:
      tags: [Menu]
      summary: Get all menu categories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryList'

  /api/menu:
    get:
      tags: [Menu]
      summary: Get full menu with categories
      responses:
        '200':
          description: Complete menu
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuList'
    post:
      tags: [Menu]
      summary: Create new menu item
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemCreate'
      responses:
        '201':
          description: Menu item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'

  /api/menu/{id}:
    get:
      tags: [Menu]
      summary: Get menu item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Menu item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MenuItem'

    patch:
      tags: [Menu]
      summary: Update menu item
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuItemUpdate'
      responses:
        '200':
          description: Menu item updated

    delete:
      tags: [Menu]
      summary: Delete menu item
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Menu item deleted

  /api/menu/{id}/discount:
    post:
      tags: [Menu]
      summary: Apply discount to menu item
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DiscountRequest'
      responses:
        '200':
          description: Discount applied

  # Order Service Endpoints (port 8084)
  /api/orders:
    get:
      tags: [Orders]
      summary: Get user orders
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
    
    post:
      tags: [Orders]
      summary: Create new order
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

schemas:
    UserSignup:
      type: object
      properties:
        name:
          type: string
          example: "John Manager"
        email:
          type: string
          example: "john@blaban.com"
        password:
          type: string
          example: "securepass123"
        role:
          type: string
          enum: [user, manager]
          example: "manager"
        bio:
          type: string
          example: "Restaurant manager with 5 years experience"

    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: "john@blaban.com"
        password:
          type: string
          example: "securepass123"

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    TokenVerification:
      type: object
      properties:
        valid:
          type: boolean
          example: true
        user_id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        roles:
          type: string
          example: "manager"

    UserResponse:
      type: object
      properties:
        id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        name:
          type: string
          example: "John Manager"
        email:
          type: string
          example: "john@blaban.com"
        role:
          type: string
          example: "manager"

    MenuItemCreate:
      type: object
      properties:
        name:
          type: string
          example: "Koshari Manga"
        price:
          type: number
          example: 100
        category_name:
          type: string
          example: "Egyptian"
        quantity:
          type: integer
          example: 10
        is_available:
          type: boolean
          example: true

    MenuItem:
      type: object
      properties:
        id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440001"
        name:
          type: string
          example: "Koshari Manga"
        price:
          type: number
          example: 100
        effective_price:
          type: number
          example: 85
        is_available:
          type: boolean
          example: true
        quantity:
          type: integer
          example: 10
        has_discount:
          type: boolean
          example: true
        discount_value:
          type: number
          example: 15
        category:
          $ref: '#/components/schemas/Category'

    Category:
      type: object
      properties:
        id:
          type: string
          example: "c01b1ff4-f894-4ef2-b27a-22aacc2fca70"
        name:
          type: string
          example: "Egyptian"
        picture:
          type: string
          example: "https://storage.blaban.com/categories/egyptian.jpg"

    MenuItemUpdate:
      type: object
      properties:
        name:
          type: string
          example: "Koshari Manga Special"
        price:
          type: number
          example: 120
        category_name:
          type: string
          example: "Egyptian"
        quantity:
          type: integer
          example: 15
        is_available:
          type: boolean
          example: true

    DiscountRequest:
      type: object
      properties:
        discount_value:
          type: number
          example: 15
        active:
          type: boolean
          example: true

    OrderCreate:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: string
                example: "550e8400-e29b-41d4-a716-446655440001"
              quantity:
                type: integer
                example: 2

    Order:
      type: object
      properties:
        id:
          type: string
          example: "ord_550e8400-e29b-41d4-a716-446655440000"
        user_id:
          type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
        items:
          type: array
          items:
            type: object
            properties:
              item_id:
                type: string
                example: "550e8400-e29b-41d4-a716-446655440001"
              name:
                type: string
                example: "Koshari Manga"
              price:
                type: number
                example: 85
              quantity:
                type: integer
                example: 2

    OrderList:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        count:
          type: integer
          example: 1